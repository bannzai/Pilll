---
description: 
globs: 
alwaysApply: true
---

# Pilll プロジェクト概要

## アプリケーション概要
飲み忘れの不安をなくすピルの服用管理モバイルアプリ・Pilllの開発をしています。
ピルの服用時刻にリマインド、服用履歴の管理、生理管理を行えるアプリになっています
iOS・Androidアプリ両方を提供しております。Flutter製のアプリです。このリポジトリはPilllのFlutterプロジェクトのリポジトリです

### 主な機能
- ピルの服用記録: 服用記録・取り消し。服用履歴を確認できる
- ピルシートUI: ピルシートをメタファーとしたUIで「どこまで飲んだかを一目でわかる」価値を提供。また、ピルシートのUIからいつ頃生理が来るか、何日飲む薬か、何番目の薬か。が一目でわかる。表示番号も調整できる
- 生理記録: 生理が記録・編集ができる
- 日記: カレンダーUIがあり、体調を記録
- 未来の予定: カレンダーUIから予定を書き込むことができる。通院予定など
- プレミアムプラン（有料機能）

## 技術スタック
詳細は、 @pubspec.yaml を参考

### 状態管理
- **Riverpod**: グローバル状態管理
- **Flutter Hooks**: Widget内部状態管理

### バックエンド・インフラ
- **Firebase**:
  - Authentication (認証)
  - Firestore (データベース)
  - Analytics
  - Crashlytics
  - Remote Config
  - Messaging (プッシュ通知)

### その他主要パッケージ
- **freezed** - イミュータブルなデータクラス生成
- **json_annotation** - JSONシリアライゼーション
- **mockito** - テスト用モック
- **intl** - 国際化対応
- **shared_preferences** - ローカルストレージ

### 決済
- **RevenueCat** - アプリ内課金管理

## コーディング規約

### Lintルール (analysis_options.yaml)
- 1ラインは150行
- その他は、 @analysis_options.yaml を参照

### ファイル構成・命名規則
- **エンティティ**: `lib/entity/`: `.codegen.dart` サフィックスで自動生成ファイルを識別
- **Provider**: `lib/provider/`: Riverpodプロバイダー
- **機能別ディレクトリ**: `lib/features/`: 各画面・機能ごとにディレクトリを分割
- **コンポーネント**: `lib/components/` 
  * Deprecated: atoms/molecules/organisms/page/templateのAtomic Design構成
  * components/の下は特にルールなく都合よくパッケージを切っていきましょう

### コード生成
- `build_runner` を使用
- 対象: freezed, json_serializable, riverpod_generator
- 実行コマンド: `flutter pub run build_runner build --delete-conflicting-outputs;dart format lib -l 150`

### テスト
- テストファイルは `test/` ディレクトリに配置
- 日本語でのコメントを推奨
- MockitoによるMock生成を活用

### Git管理
- 自動生成ファイル（`*.g.dart`, `*.freezed.dart`）も commit 対象

### その他の重要事項
- **ライセンス**: 独自ライセンス（著作権保持、個人利用・PR許可）
- **多言語対応**: 70以上の言語に対応（app_*.arb）
- **ログ出力**: debugPrintを使用（本番環境では無効化される）

### マネタイズ
- サブスクリプション: 2種類ある
  * 割引: 月額300円, 年額3600円
  * 通常: 月額600円, 年額4800円
- また、古いプランに 月額480円,年額3600円 がある。時たまキャンペーンとしてこの金額のプランを提供することがある
- 広告: アプリのホーム画面にAdMobのバナー広告。たまに企業からの純広告(バナー形式)を表示することがある


## 開発時の注意点
1. Firebaseの設定ファイルは環境ごとに分かれている（main.dev.dart/main.prod.dart）
2. RemoteConfigでフィーチャーフラグを管理